# -*- coding: utf-8 -*-
"""MF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11dGuOCZQHk0ply1EbIg5ZcX3phSbuDVB
"""

import json, requests
import numpy as np

res_url = requests.get("http://15.165.204.148:8080/giveAll")
res_text = res_url.text
sample_res_to_dict = json.loads(res_text)

sample_user = '''[{
  "id" : 0,
  "name" : "박상연"
},{
  "id" : 1,
  "name" : "김희원"
},{
  "id" : 2,
  "name" : "박정우"
}]'''

sample_review = '''[{
    "id" : 0,
    "name" : "내가찜한닭",
    "username" : "박상연",
    "score" : 4
},{
    "id" : 2,
    "name" : "지지고",
    "username" : "박정우",
    "score" : 5
},{
    "id" : 1,
    "name" : "백채",
    "username" : "김희원",
    "score" : 3
},{
    "id" : 1,
    "name" : "백채",
    "username" : "박상연",
    "score" : 5
},{
    "id" : 1,
    "name" : "백채",
    "username" : "박정우",
    "score" : 3
},{
    "id" : 3,
    "name" : "청년다방",
    "username" : "김희원",
    "score" : 4
},{
    "id" : 3,
    "name" : "청년다방",
    "username" : "박상연",
    "score" : 4
},{
    "id" : 1,
    "name" : "백채",
    "username" : "김희원",
    "score" : 3
}]'''
# sample_res_to_dict = json.loads(sample_res)
sample_user_to_dict = json.loads(sample_user)
sample_review_to_dict = json.loads(sample_review)
print("sample_user", sample_user)
print("sample_user_to_dict",sample_user_to_dict)

train_data = []

for i in range(len(sample_review_to_dict)):
  temp = []
  for j in range(len(sample_user_to_dict)):
    if sample_user_to_dict[j]['name'] == sample_review_to_dict[i]['username']:
      temp.append(sample_user_to_dict[j]['id']) # user id
  temp.append(sample_review_to_dict[i]['id']) # restaurant id
  temp.append(sample_review_to_dict[i]['score'])
  train_data.append(temp)


import pandas as pd
train_data_to_pd = pd.DataFrame(train_data)
train_data_to_pd = train_data_to_pd.rename(columns={train_data_to_pd.columns[0]: 'user',train_data_to_pd.columns[1]: 'restaurant',train_data_to_pd.columns[2]: 'rating'})
# train_data_to_pd.rename(columns={train_data_to_pd.columns[1]: 'restaurant'})
# train_data_to_pd.rename(columns={train_data_to_pd.columns[2]: 'rating'})
# train_data_to_pd.columns.values[0] = "user"
# train_data_to_pd.columns.values[1] = "restaurant"
# train_data_to_pd.columns.values[2] = "rating"

user_res_rating = train_data_to_pd.pivot_table('rating',index = 'user',columns = 'restaurant').fillna(0)


matrix = user_res_rating.to_numpy()
version = 1 # 0 is mean without 0, 1 is just mean

if version==0:
  matrix_mean = np.true_divide(matrix.sum(1),(matrix!=0).sum(1))
  print(matrix_mean)
  matrix_user_mean = matrix - matrix_mean.reshape(-1,1)
elif version==1:
  user_res_rating_mean = np.mean(matrix, axis=1)
  print(matrix)
  print(user_res_rating_mean)
  print(user_res_rating_mean.reshape(-1,1))
  matrix_user_mean = matrix - user_res_rating_mean.reshape(-1,1)
print(matrix_user_mean)

import scipy
import scipy.sparse
import scipy.sparse.linalg
U, sigma, Vt = scipy.sparse.linalg.svds(matrix_user_mean, k = 2)
print(U.shape)
print(sigma.shape)
print(Vt.shape)

sigma = np.diag(sigma)

svd_user_predicted_ratings = np.dot(np.dot(U, sigma),Vt) + user_res_rating_mean.reshape(-1,1)
svd_predict_df = pd.DataFrame(svd_user_predicted_ratings, columns = user_res_rating.columns)


debug = 0

def recommend_restaurants(svd_predict_df, user_id, user_res_rating, num_row=5):
  score_row = svd_predict_df.iloc[user_id].sort_values(ascending=False)
  already_ate = user_res_rating.iloc[user_id]
  already_ate = already_ate.tolist()
  if debug == 1:
    print(type(already_ate))
    print(already_ate)
    print(already_ate[1])
    print(user_res_rating)
    print(score_row)
    print(type(score_row))
    print(score_row[0])
  for i in range(len(already_ate)):
    if already_ate[i] != 0:
      score_row = score_row.drop(i)
  count = 0
  for a, b in score_row.items():
    count = count+1
    if count <= num_row:
      continue
    score_row = score_row.drop(a)
  final_recommend = score_row.to_json()
  
  print(score_row)
  return final_recommend

final_recommend = recommend_restaurants(svd_predict_df, 1, user_res_rating, 10)
print(final_recommend)